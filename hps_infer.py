import model.hpsv2 as hpsv2
import pandas as pd
from PIL import Image
from utlis import get_data,auc_score
import torch
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
imgs_path = 'images/bad1.png'
model_path = 'Devin/benchmark/model/hpsv2/weight/HPS_v2.1_compressed.pt'
data_path = 'bad_case/case.csv'
# imgs_path can be a list of image paths, with the images generated by the same prompt
# or image path of string type
# or image of PIL.Image.Image type
model,tokenizer,preprocess,_ = hpsv2.initialize(hps_version="v2.1",text_work=True)
checkpoint = torch.load('hps-2.1pth/v2/model_13.pth', map_location=device)
model.load_state_dict(checkpoint['state_dict'])
imgs_path,prompt,label = get_data(data_path)
label = [False if item else True for item in label]

thro = 0.255
correct = 0
total = len(imgs_path)

# normal_prompt = "highres, clean image, detailed, best quality, high quality, sharp, beautiful, unique, well-proportioned, complete, in frame, realistic fingers, well-drawn hands, well-drawn face, accurate anatomy, correct proportions, single face, harmonious proportions, natural limbs, complete arms, complete legs, natural fingers, correct number of fingers"
true_label = []
result_label = []
for img_path,p,l in zip(imgs_path,prompt,label):
    result = hpsv2.score(img_path, p,model,tokenizer,preprocess) 
    img = Image.open(img_path)
    if result[0] > thro:
        pred = True
    else:
        pred = False
    if pred == l:
        correct += 1
    true_label.append(l)
    result_label.append(result[0])
    # img.thumbnail(max_size)
    # img.show()
    print(f"Score: {result},label:{l},Image: {img_path}, Prompt: {p[:50]}")
print(f"Correct: {correct}/{total}")
print(result_label)

auc_score(true_label, result_label,step = 0.0005)
print(model)